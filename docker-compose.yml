# services:
#   prometheus:
#     image: prom/prometheus:v3.1.0
#     ports:
#       - "9090:9090"
#     volumes:
#       - ./configs/prometheus-config.yml:/etc/prometheus/prometheus.yml
#       - prometheus-data:/prometheus
#     command:
#       - "--config.file=/etc/prometheus/prometheus.yml"
#     restart: always
#     networks:
#       - monitoring
#     extra_hosts:
#       - "host.docker.internal:host-gateway"
#
#   mimir:
#     image: grafana/mimir:2.14.3
#     ports:
#       - "9009:9009"
#       - "9095:9095"
#     volumes:
#       - ./configs/mimir-config.yml:/etc/mimir/mimir.yml
#       - mimir-data:/mimir
#     command:
#       - "-config.file=/etc/mimir/mimir.yml"
#     restart: always
#     networks:
#       - monitoring
#
#   promtail:
#     image: grafana/promtail:3.4
#     volumes:
#       - /var/log/journal:/var/log/journal:ro
#       - promtail-data:/promtail
#       - ./configs/promtail-config.yml:/etc/promtail/config.yml
#     command: -config.file=/etc/promtail/config.yml
#     restart: always
#     networks:
#       - monitoring
#
#   loki:
#     image: grafana/loki:3.4
#     ports:
#       - "3100:3100"
#     volumes:
#       - loki-data:/loki
#       - ./configs/loki-config.yml:/etc/loki/local-config.yml
#     command: -config.file=/etc/loki/local-config.yml
#     restart: always
#     networks:
#       - monitoring
#
#   grafana:
#     image: grafana/grafana:11.5.1
#     ports:
#       - "3001:3000"
#     env_file:
#       - .env.production
#     volumes:
#       - ./configs/provisioning:/etc/grafana/provisioning
#       - grafana-data:/var/lib/grafana
#     restart: always
#     networks:
#       - monitoring
#
# volumes:
#   prometheus-data:
#   mimir-data:
#   promtail-data:
#   loki-data:
#   grafana-data:
#
# networks:
#   monitoring:
#     driver: bridge
#

services:
  frontend:
    build:
      context: ./docker
      dockerfile: frontend.Dockerfile
    ports:
      - "3000:3000"
    env_file:
      - .env.development
    volumes:
      - ./frontend:/app
      - ./scramble_images:/app/public/scrambles:ro
    networks:
      - speedcubingslovakia
  
  backend:
    build:
      context: ./docker
      dockerfile: backend.Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    environment:
      - SPEEDCUBINGSLOVAKIA_BACKEND_ENV=development
    env_file:
      - .env.development
    networks:
      - speedcubingslovakia
    depends_on:
      db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
  
  db:
    image: postgres:17.5-alpine
    restart: always
    env_file:
      - .env.development
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - speedcubingslovakia
    ports:
      - "6432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d speedcubingslovakiadb_local"]
      interval: 10s
      timeout: 5s
      retries: 5

  migrate:
    image: migrate/migrate:v4.18.3
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env.development
    entrypoint: ["sh", "-c"]
    command: # $$ tells docker to get the variable from container and not parse immediately
      - >
        migrate -path=/migrations -database "$${DB_URL}" up;
    networks:
      - speedcubingslovakia
    volumes:
      - ./database/migrations:/migrations

  scrambling:
    build:
      context: ./docker
      dockerfile: scrambling.Dockerfile
    ports:
      - "3999:3999"
    environment:
      PORT: 3999
    networks:
      - speedcubingslovakia
    volumes:
      - ./scrambling:/app

networks:
  speedcubingslovakia:

volumes:
  postgres_data:
